#!/usr/bin/env python3
import signal
import sys
import socket
import time

import Pololu_VNH5019 as VNH  # подвязка драйвера ?? откуда исходник
from mpu6050 import *  # подвязка датчика


# Применен процедурный стиль написания кода


# 1. ДАННЫЕ

# Инициализация датчика и драйвера
mpu = MPU6050()
mpu.initialize()
md = VNH.Pololu_DualVNH5019Shield()

# Ввод переменных
PWM_T=0  # вычисление(составляющая) воздействия на колеса
PWM_R=0  # воздействие на правое колесо
PWM_L=0  # воздействие на левое колесо

de=0  # дифференциальная ошибка
actAngle=0  # пропорциональная ошибка

K=1  # постоянный коэфф
Kp=9
Ki=0.5
Kd=40

PWM_MIN=1
LimitPower=400
e_Arr=0  # интегральная ошибка
e_Arr_Max=400
currentAngle_old=0

# Калибровка данных
# mpu.gyro_offs = {'x': -178, 'y': 259, 'z': -104}
# mpu.accel_offs =  {'y': -354, 'x': 389, 'z': -1482}

accel_data = mpu.get_accel()  # метод mpu get_accel(ускорение)
y_rotation = mpu.get_y_rotation(accel_data)  # метод mpu get_accel(поворот по y)

last_time = time.time()
alpha = 0.95;

# 2. ФУНКЦИИ

# функция лимит(LimitPower == 400)
def Limit(x, limit):
	if abs(x)<=limit:
		return x
	
	if abs(x)>limit and x<0:
		return -limit
	if abs(x)>limit and x>0:
		return limit

# функция PID-контроль
def PID_Control():
	PWM_T = K*(Kp*actAngle+Ki*e_Arr+Kd*de)  # вычисление воздействия на колеса
	
	PWM_T = PWM_T + MinPower(PWM_T,PWM_MIN)  # PWM_MIN(minp) == 1. Т.е: либо PWM_T - 1, либо PWM_T + 1
	PWM_T = Limit(PWM_T,LimitPower)  # LimitPower == 400
	# что, если передать просто PWM_T ?
	PWM_R=(PWM_T+MinPower(PWM_T,PWM_MIN))  # воздействие на правое колесо ?2-е преобразование
	PWM_L=(PWM_T+MinPower(PWM_T,PWM_MIN))  # воздействие на левое колесо ?2-е преобразование
	md.setM1Speed(PWM_R)  # вызов метода POLULU setM1Speed
	md.setM2Speed(-PWM_L)  # вызов метода POLULU setM1Speed
	
	print (actAngle,"\t",e_Arr,"\t", de,"\t" , "\n")  # вывод пропор интегр дифф -- ошибок
  
# функция minpower (переключатель: либо 1, либо -1. Т.к. minp == 1)
def MinPower(xxxxx, minp):
	if xxxxx>0:
			return  minp
	if xxxxx<0:
			return  -minp

# функция драйвера			
def signal_handler(sig, frame):
	md.setM1Speed(0)
	md.setM2Speed(0)
	sys.exit(0)

# функция вывода(запись ОС)	
def vivod(y_rotation,e_Arr, de, Kp,Ki,Kd):  # получает: у_поворот, интегр_ош, дифф_ош, Kp, Ki, Kd
	print (y_rotation,"\t",e_Arr,"\t", de,"\t", Kp,"\t",Ki,"\t",Kd)
	f = open('text.txt', 'a')
	f.writelines(str(y_rotation)+"\t"+str(e_Arr)+"\t"+ str(de)+"\t"+ str(Kp)+"\t"+str(Ki)+"\t"+str(Kd)+"\n")
	# f.seek(10)
	f.close()
	
# 3. ИСПОЛНЯЕМЫЙ КОД (бесконечный цикл)
	
while True:  
	new_time = time.time()  # время в сек, прошедшее с 1 янв 1970
	
	gyro_data = mpu.get_gyro()  # метод mpu get_gyro(взятие угла)
	accel_data = mpu.get_accel()  # метод mpu get_accel(взятие ускорения)
	
	dt = new_time - last_time  # дифф. времени
	last_time = new_time  # обновление last_time
	
	gyro_angle_y = gyro_data['y']*dt + y_rotation  # (взятие угла)*dt + поворот по "y"
	y_rotation = alpha*gyro_angle_y + (1.0 - alpha)*mpu.get_y_rotation(accel_data)  # alpha == 0.95
	y_offset = y_rotation * 2  # ?!?
	actAngle = y_rotation + 1.6  # ?!?
	
	de = actAngle - currentAngle_old  # дифф ошибке присваивается разность пропорциональной ошибки, стар и нов
	e_Arr = e_Arr+actAngle  # интергральной ошибке присваивается сумма интегральной и пропорциональной
	e_Arr = Limit(e_Arr, e_Arr_Max)
	currentAngle_old = actAngle # инициализируется стар пропорц ошибка
	# vivod(y_rotation, e_Arr ,de, Kp,Ki,Kd)
	
	if abs(actAngle)<40:  # Включение PID-контроля при этих условиях (пропор ошибка)
		PID_Control()
	else:		      # Иначе отсутствие регулирования
		md.setM1Speed(0)
		md.setM2Speed(0)	
	signal.signal(signal.SIGINT, signal_handler)  # вероятно, метод POLOLU
	time.sleep(0.005)  # приостановить выполнение на зад кол-во секунд
